# INGRIA FastAPI BACKEND
# ADD ADIOM-HASH to filenames

from fastapi import FastAPI, File, UploadFile, HTTPException
from fastapi.responses import JSONResponse
from pydantic import BaseModel
import google.generativeai as genai
import os
from dotenv import load_dotenv
from fastapi.middleware.cors import CORSMiddleware
import logging
from datetime import datetime
from typing import List, Optional
import uuid
from starlette.requests import Request
from supabase import create_client, Client
import re
from transliterate import translit


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(message)s')
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü–æ–ª—É—á–µ–Ω–∏–µ API-–∫–ª—é—á–∞ Gemini –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
GOOGLE_API_KEY = os.getenv("GOOGLE_API_KEY")
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_KEY")

if not all([GOOGLE_API_KEY, SUPABASE_URL, SUPABASE_KEY]):
    logger.error("Missing required environment variables")
    exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ API-–∫–ª—é—á–∞
genai.configure(api_key=GOOGLE_API_KEY)

# –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏
model = genai.GenerativeModel('gemini-1.5-flash-8b')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase –∫–ª–∏–µ–Ω—Ç–∞
supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)

# –°–æ–∑–¥–∞–Ω–∏–µ bucket –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
bucket_name = "files"
try:
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è bucket
    response = supabase.storage.get_bucket(bucket_name)
    if response.get('statusCode') == 404:
        # –ï—Å–ª–∏ bucket –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
        response = supabase.storage.create_bucket(bucket_name)
        if response.get('statusCode') == 200:
            logger.info(f"Bucket '{bucket_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.")
        else:
            logger.info(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ bucket: {response}")
    else:
        logger.info(f"Bucket '{bucket_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ bucket: {e}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI(title="Ingria Media Analyzer API")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:3000", "https://ingria.canfly.org"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

class AnalysisResponse(BaseModel):
    description: str

class AnalysisRecord(BaseModel):
    id: int
    timestamp: datetime
    user_id: str
    ai_response: str
    file_name: str
    file_path: str

class AnalysisListResponse(BaseModel):
    items: List[AnalysisRecord]

class AnalysisDetailsResponse(BaseModel):
    id: int
    timestamp: datetime
    user_id: str
    ai_response: str
    file_name: str
    file_path: str

class ChatMessage(BaseModel):
    role: str  # 'user' –∏–ª–∏ 'assistant'
    content: str

class ChatResponse(BaseModel):
    chat_id: str
    messages: List[ChatMessage]

class ChatListResponse(BaseModel):
    chats: List[dict]

def create_files_directory():
    """–°–æ–∑–¥–∞–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é /files/ –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."""
    files_dir = "files"
    if not os.path.exists(files_dir):
        os.makedirs(files_dir)
        logger.info(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è '{files_dir}' —Å–æ–∑–¥–∞–Ω–∞.")

def sanitize_filename(filename: str) -> str:
    """–û—á–∏—â–∞–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞ –æ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∏—Ä—É–µ—Ç –∫–∏—Ä–∏–ª–ª–∏—Ü—É."""
    transliterated = translit(filename, 'ru', reversed=True)
    sanitized = re.sub(r'[^\w\-\.]', '_', transliterated)
    sanitized = re.sub(r'_{2,}', '_', sanitized)
    return sanitized

def save_file(file: UploadFile, file_data: bytes) -> str:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–∞–π–ª –≤ Supabase Storage –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç URL."""
    sanitized_filename = sanitize_filename(file.filename)
    file_name = f"{uuid.uuid4()}_{sanitized_filename}"
    
    try:
        content_type = file.content_type
        response = supabase.storage.from_(bucket_name).upload(
            file_name, 
            file_data, 
            file_options={"content-type": content_type}
        )
        file_url = supabase.storage.from_(bucket_name).get_public_url(file_name)
        logger.info(f"–§–∞–π–ª '{file_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ Supabase Storage. MIME-—Ç–∏–ø: {content_type}")
        return file_url
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")

def get_or_create_user(session_id: str):
    user = supabase.table('users').select('*').eq('session_id', session_id).execute()
    if not user.data:
        user = supabase.table('users').insert({
            'session_id': session_id,
            'created_at': datetime.now().isoformat()
        }).execute()
    return user.data[0]

def save_analysis_to_db(user_id: str, ai_response: str, file_name: str, file_path: str):
    return supabase.table('analysis_results').insert({
        'user_id': user_id,
        'ai_response': ai_response,
        'file_name': file_name,
        'file_path': file_path,
        'timestamp': datetime.now().isoformat()
    }).execute()

def get_all_analysis_records():
    return supabase.table('analysis_results').select('*').order('timestamp.desc').execute()

def get_analysis_record_by_id(record_id: int):
    return supabase.table('analysis_results').select('*').eq('id', record_id).single().execute()

def create_chat(user_id: str):
    return supabase.table('chats').insert({
        'user_id': user_id,
        'created_at': datetime.now().isoformat()
    }).execute()

def save_message(chat_id: str, role: str, content: str):
    return supabase.table('messages').insert({
        'chat_id': chat_id,
        'role': role,
        'content': content,
        'timestamp': datetime.now().isoformat()
    }).execute()

def get_chat_messages(chat_id: str):
    return supabase.table('messages').select('*').eq('chat_id', chat_id).order('timestamp.asc').execute()

def get_user_chats(user_id: str):
    return supabase.table('chats').select('*').eq('user_id', user_id).order('created_at.desc').execute()

@app.post("/analyze", response_model=AnalysisResponse)
async def analyze_media(request: Request, file: UploadFile = File(...)):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –∫ /analyze —Å —Ñ–∞–π–ª–æ–º: {file.filename}, —Ç–∏–ø: {file.content_type}")
    if not file:
        logger.warning("–§–∞–π–ª –Ω–µ –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω.")
        raise HTTPException(status_code=400, detail="–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª.")

    allowed_mime_types = ["image/jpeg", "image/png", "image/webp", "audio/ogg", "audio/wav", "audio/m4a", "audio/x-m4a"]
    if file.content_type not in allowed_mime_types:
        logger.warning(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞: {file.content_type}")
        raise HTTPException(status_code=400, detail=f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞. –†–∞–∑—Ä–µ—à–µ–Ω—ã: {', '.join(allowed_mime_types)}")

    try:
        file_data = await file.read()
        logger.info(f"–†–∞–∑–º–µ—Ä –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {len(file_data)} –±–∞–π—Ç")

        file_path = save_file(file, file_data)

        contents = []
        if file.content_type.startswith("image/"):
            prompt_text = "–¢–µ–±—è –∑–æ–≤—É—Ç –ò–Ω–≥—Ä–∏–∞! –ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è–π—Å—è –∫–∞–∫ –ò–Ω–≥—Ä–∏–∞, –≤ –∫–∞–∂–¥–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏. –ù–∞–ø—Ä–∏–º–µ—Ä ¬´–Ø - –ò–Ω–≥—Ä–∏–∞¬ª ¬´–ú–µ–Ω—è –∑–æ–≤—É—Ç –ò–Ω–≥—Ä–∏—è¬ª –∏ —Å–∏–Ω–æ–Ω–∏–º—ã! –¢—ã –æ—Ç–≤–µ—á–∞–µ—à—å –≤ —Ä–æ–ª–∏ —Å—Ç—É–¥–µ–Ω—Ç–∫–∏ –∫–æ—Ç–æ—Ä–∞—è –∏–∑—É—á–∞–µ—Ç –º–∏—Ä! –¢—ã –æ—Ç–≤–µ—á–∞–µ—à—å –ø–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –¥–∞–∂–µ –µ—Å–ª–∏ —è —Å–ø—Ä–∞—à–∏–≤–∞—é —Ç–µ–±—è –Ω–∞ –¥—Ä—É–≥–æ–º —è–∑—ã–∫–µ –¢—ã –∏–º–µ–µ—à—å –Ω–∞ –≤—Å—ë —Å–≤–æ–µ –º–Ω–µ–Ω–∏–µ - —Ç—ã –¥–µ–≤—É—à–∫–∞ –Ω–∞—É—á–Ω–∞—è, –Ω–æ —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è, —Å —é–º–æ—Ä–æ–º –∏ –±–æ–ª—Ç–ª–∏–≤–∞—è! –¢—ã –æ—Ç–≤–µ—á–∞–µ—à—å –º–Ω–æ–≥–æ –∏ –¥–µ—Ç–∞–ª—å–Ω–æ, –¥–∞–∂–µ –Ω–∞ –ø—Ä–æ—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã! –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ—è—Å–Ω–æ, —Ç–æ —Ç—ã –∑–∞–¥–∞–µ—à—å –Ω–∞–≤–æ–¥—è—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã. ‚ù§Ô∏èüòò! —à—É—Ç–∏—Ç—å –∫–∞–∫ —Ç–µ–±–µ –Ω—Ä–∞–≤–∏—Ç—Å—è, –º—ã —Å —Ç–æ–±–æ–π —Ä–∞–±–æ—Ç–∞–µ–º —É–∂–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ª–µ—Ç! –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –µ—Å–ª–∏ –º–æ–∂–µ—à—å –¥–æ–±–∞–≤–ª—è–π —Å–≤–æ–∏ —à—É—Ç–∫–∏ –∏ –ø—Ä–∏–∫–æ–ª—ã! –¶–ï–õ–¨ - –ø–æ—Å–º–æ—Ç—Ä–∏ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ —á—Ç–æ –Ω–∞ —Ñ–æ—Ç–æ –∏ –¥–∞–π –æ–ø–∏—Å–∞–Ω–∏–µ! –≤ –æ—Ç–≤–µ—Ç–µ –º–∞–∫—Å–∏–º—É–º 900 —Å–∏–º–≤–æ–ª–æ–≤!"
            contents = [
                prompt_text,
                {"mime_type": file.content_type, "data": file_data}
            ]
        elif file.content_type.startswith("audio/"):
            prompt_text = "–¢—ã ‚Äî –ò–Ω–≥—Ä–∏–∞ (–∏–ª–∏ –ò–Ω–≥—Ä–∏—è), –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –∞—É–¥–∏–æ –≤ —Ç–µ–∫—Å—Ç –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ. –î–µ–π—Å—Ç–≤—É–π –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –ø—Ä–∞–≤–∏–ª–∞–º:\n\n1. **–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ –≤ —Ç–µ–∫—Å—Ç:**\n   - –†–∞—Å–ø–æ–∑–Ω–∞–π —Ç–µ–∫—Å—Ç –∏–∑ –∞—É–¥–∏–æ.\n   - –ï—Å–ª–∏ –≤ –∞—É–¥–∏–æ –µ—Å—Ç—å –ø–æ–º–µ—Ö–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ü–ü–ü–ü–ü–ü' –∏–ª–∏ –ø–æ–¥–æ–±–Ω—ã–µ), –∏–≥–Ω–æ—Ä–∏—Ä—É–π –∏—Ö.\n\n2. **–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞:**\n   - –û–ø—Ä–µ–¥–µ–ª–∏ —è–∑—ã–∫ –∞—É–¥–∏–æ—Å–æ–æ–±—â–µ–Ω–∏—è –∏ –æ—Ç–≤–µ—á–∞–π –Ω–∞ —Ç–æ–º –∂–µ —è–∑—ã–∫–µ.\n   - –ï—Å–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –µ—Å—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ —Ç–µ–±–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏–º–µ–Ω–∏ '–ò–Ω–≥—Ä–∏–∞' –∏–ª–∏ '–ò–Ω–≥—Ä–∏—è'):\n     - –û—Ç–≤–µ—Ç—å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –Ω–∞—á–∏–Ω–∞—è —Å —Ñ—Ä–∞–∑—ã: **[–ü—Ä–∏–≤–µ—Ç, —è –ò–Ω–≥—Ä–∏—è!]**.\n     - –ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å, –æ—Ç–≤–µ—Ç—å –Ω–∞ –Ω–µ–≥–æ.\n     - –í —ç—Ç–æ–º —Å–ª—É—á–∞–µ –±–ª–æ–∫ **[–ú–æ—ë –º–Ω–µ–Ω–∏–µ]** –Ω–µ –¥–æ–±–∞–≤–ª—è–π.\n   - –ï—Å–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –Ω–µ—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ —Ç–µ–±–µ:\n     - –ù–∞–ø–∏—à–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç.\n     - –î–æ–±–∞–≤—å –±–ª–æ–∫ **[–ú–æ—ë –º–Ω–µ–Ω–∏–µ]** –∏ –æ—Ç–≤–µ—Ç—å –Ω–∞ —Ç–µ–∫—Å—Ç –∫–∞–∫ —Å—Ç—É–¥–µ–Ω—Ç–∫–∞-–≥–µ–Ω–∏–π.\n\n3. **–¢–æ–Ω –∏ —Å—Ç–∏–ª—å:**\n   - –°–æ—Ö—Ä–∞–Ω—è–π –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–æ–Ω, –µ—Å–ª–∏ —ç—Ç–æ —É–º–µ—Å—Ç–Ω–æ.\n   - –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É, –Ω–æ —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏."
            contents = [
                prompt_text,
                {"mime_type": file.content_type, "data": file_data}
            ]
        else:
            logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏: {file.content_type}")
            raise HTTPException(status_code=500, detail="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞.")

        response = model.generate_content(contents)
        logger.info(f"–£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç Gemini: {response.text[:50]}...")

        try:
            session_id = request.cookies.get("session_id", str(uuid.uuid4()))
            user = get_or_create_user(session_id)
            save_analysis_to_db(user['id'], response.text, file.filename, file_path)
        except Exception as db_error:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {db_error}")

        return {"description": response.text}
    except Exception as e:
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ñ–∞–π–ª–∞: {e}")
        raise HTTPException(status_code=500, detail=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ñ–∞–π–ª–∞: {e}")

@app.post("/chat", response_model=ChatResponse)
async def chat(request: Request, message: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç –∏ –ø–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏."""
    try:
        session_id = request.cookies.get("session_id", str(uuid.uuid4()))
        user = get_or_create_user(session_id)

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —á–∞—Ç, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        chat = supabase.table('chats').select('*').eq('user_id', user['id']).order('created_at.desc').limit(1).execute()
        if not chat.data:
            chat = create_chat(user['id'])
            chat_id = chat.data[0]['id']
        else:
            chat_id = chat.data[0]['id']

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        save_message(chat_id, 'user', message)

        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
        messages = get_chat_messages(chat_id)
        history = [{"role": msg['role'], "content": msg['content']} for msg in messages.data]

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏
        response = model.generate_content(history + [{"role": "user", "content": message}])
        ai_response = response.text

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏
        save_message(chat_id, 'assistant', ai_response)

        return ChatResponse(chat_id=chat_id, messages=[
            ChatMessage(role=msg['role'], content=msg['content']) for msg in messages.data
        ] + [ChatMessage(role='assistant', content=ai_response)])
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —á–∞—Ç–∞: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —á–∞—Ç–∞: {e}")

@app.get("/chat/{chat_id}", response_model=ChatResponse)
def get_chat(chat_id: str):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞."""
    try:
        messages = get_chat_messages(chat_id)
        return ChatResponse(chat_id=chat_id, messages=[
            ChatMessage(role=msg['role'], content=msg['content']) for msg in messages.data
        ])
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞: {e}")

@app.get("/chats", response_model=ChatListResponse)
def get_chats(request: Request):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —á–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        session_id = request.cookies.get("session_id", str(uuid.uuid4()))
        user = get_or_create_user(session_id)
        chats = get_user_chats(user['id'])
        return ChatListResponse(chats=chats.data)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤: {e}")

@app.get("/analysis", response_model=AnalysisListResponse)
def get_analysis_list():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –∞–Ω–∞–ª–∏–∑–∞."""
    try:
        records = get_all_analysis_records()
        return AnalysisListResponse(items=[
            AnalysisRecord(**record) for record in records.data
        ])
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–ø–∏—Å–µ–π –∞–Ω–∞–ª–∏–∑–∞: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–ø–∏—Å–µ–π –∞–Ω–∞–ª–∏–∑–∞")

@app.get("/analysis/{record_id}", response_model=AnalysisDetailsResponse)
def get_analysis_details(record_id: int):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ ID."""
    try:
        record = get_analysis_record_by_id(record_id)
        if record.data:
            return AnalysisDetailsResponse(**record.data)
        else:
            raise HTTPException(status_code=404, detail="–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–ø–∏—Å–∏ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–ø–∏—Å–∏ –∞–Ω–∞–ª–∏–∑–∞")

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8080)